syntax = "proto3";

package transaction;

option go_package = "gen/go/transaction_service/.";

// Transfer a specific amount from one user to another
message TransferFundsRequest {
  string from_user_id = 1;       // UUID (char(36))
  string to_user_id = 2;         // UUID (char(36))
  uint64 amount = 3;             // In smallest denomination
}

message TransferFundsResponse {
  bool success = 1;
  string message = 2;
  string transfer_id = 3;        // TigerBeetle-generated ID (string representation of Uint128)
  string timestamp = 4;
}

// Create a TigerBeetle account for a user
message CreateAccountRequest {
  string user_id = 1;            // UUID
  string username = 2;           // Stored in UserData128
  bool bank= 3;
}

message CreateAccountResponse {
  bool success = 1;
  string message = 2;
  string user_id = 3;         // Same as user_id (UUID)
  string timestamp = 4;
}

// Get current balance for a given account
message GetBalanceRequest {
  string user_id = 1;
  uint64 from_time = 2;          // UnixMicro
  uint64 to_time = 3;
}

message GetBalanceResponse {
  bool success = 1;
  string message = 2;
  string timestamp = 3;
  string current = 4;
  repeated GBResult balances = 5;
}

// Get most recent transfer for account
message GetMovementsRequest {
  string user_id = 1;
  uint64 from_time = 2;
  uint64 to_time = 3;
  bool limit = 4;
}

message GTResult {
  string transferId = 1;
  string fromUsername = 2;
  string toUsername = 3;
  string amount = 4;
  string timestamp = 5;
}

message GBResult {
  string income = 1;
  string outcome= 2;
}

message GetMovementsResponse {
  bool success = 1;
  string message = 2;
  repeated GTResult movements = 3;
}


// gRPC service interface
service TransactionService {
  rpc Account(CreateAccountRequest) returns (CreateAccountResponse);
  rpc Transfer(TransferFundsRequest) returns (TransferFundsResponse);
  rpc Balance(GetBalanceRequest) returns (GetBalanceResponse);
  rpc Movements(GetMovementsRequest) returns (GetMovementsResponse);
}
